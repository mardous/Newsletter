apply plugin: 'com.android.application'

def getProperties(String fileName) {
    final Properties properties = new Properties()
    def file = file(fileName)
    if (file.exists()) {
        file.withInputStream { stream -> properties.load(stream) }
    }
    return properties
}

static def getProperty(Properties properties, String name) {
    return properties.getProperty(name) ?: "$name missing"
}

android {
    buildFeatures {
        dataBinding true
    }

    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30

        applicationId "com.mardous.newsletter"
        versionCode 1
        versionName "1.0.0"

        renderscriptTargetApi 30
        vectorDrawables.useSupportLibrary = true

        // This API key is provided for convenience. Please go to https://www.newsapi.org/register and create your own.
        buildConfigField("String", "NewsAPIKey", "\"${getProperty(getProperties('../private.properties'), 'NEWS_API_KEY')}\"")

        // Write the default region
        buildConfigField("String", "DefaultRegion", "\"${getProperty(getProperties('../public.properties'), 'DEFAULT_REGION_CODE')}\"")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-rules.pro')
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        ignore 'MissingTranslation', 'InvalidPackage'
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    productFlavors {}
}

dependencies {
    // JetPack
    implementation 'androidx.core:core:1.3.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.fragment:fragment:1.2.5'
    implementation 'androidx.loader:loader:1.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0'

    // Material design
    implementation ('com.google.android.material:material:1.2.0') {
        exclude module: 'viewpager2'
    }

    // UI-related
    implementation 'com.github.kabouzeid:app-theme-helper:1.3.10'
    implementation 'com.github.kabouzeid:RecyclerView-FastScroll:1.0.16-kmod'
    implementation 'com.heinrichreimersoftware:material-intro:2.0.0'
    implementation 'org.ocpsoft.prettytime:prettytime:4.0.5.Final'
    implementation 'de.psdev.licensesdialog:licensesdialog:2.1.0'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'
    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.1'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    // ButterKnife
    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'

    // Misc
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation('commons-validator:commons-validator:1.6') {
        exclude module: 'commons-logging'
        exclude module: 'commons-digester'
        exclude module: 'commons-collections'
    }

    // Annotations for IDEA
    implementation 'org.jetbrains:annotations:15.0'
}

repositories {
    mavenCentral()
}
